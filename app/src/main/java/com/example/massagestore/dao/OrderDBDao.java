package com.example.massagestore.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.massagestore.dao.entity.OrderDB;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ORDER_DB".
*/
public class OrderDBDao extends AbstractDao<OrderDB, Long> {

    public static final String TABLENAME = "ORDER_DB";

    /**
     * Properties of entity OrderDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Orderid = new Property(1, String.class, "orderid", false, "ORDERID");
        public final static Property Project = new Property(2, String.class, "project", false, "PROJECT");
        public final static Property Member = new Property(3, String.class, "member", false, "MEMBER");
        public final static Property User = new Property(4, String.class, "user", false, "USER");
        public final static Property Commission = new Property(5, String.class, "commission", false, "COMMISSION");
        public final static Property Yf_price = new Property(6, String.class, "yf_price", false, "YF_PRICE");
        public final static Property Sf_price = new Property(7, String.class, "sf_price", false, "SF_PRICE");
    }


    public OrderDBDao(DaoConfig config) {
        super(config);
    }
    
    public OrderDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ORDER_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ORDERID\" TEXT," + // 1: orderid
                "\"PROJECT\" TEXT," + // 2: project
                "\"MEMBER\" TEXT," + // 3: member
                "\"USER\" TEXT," + // 4: user
                "\"COMMISSION\" TEXT," + // 5: commission
                "\"YF_PRICE\" TEXT," + // 6: yf_price
                "\"SF_PRICE\" TEXT);"); // 7: sf_price
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ORDER_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, OrderDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String orderid = entity.getOrderid();
        if (orderid != null) {
            stmt.bindString(2, orderid);
        }
 
        String project = entity.getProject();
        if (project != null) {
            stmt.bindString(3, project);
        }
 
        String member = entity.getMember();
        if (member != null) {
            stmt.bindString(4, member);
        }
 
        String user = entity.getUser();
        if (user != null) {
            stmt.bindString(5, user);
        }
 
        String commission = entity.getCommission();
        if (commission != null) {
            stmt.bindString(6, commission);
        }
 
        String yf_price = entity.getYf_price();
        if (yf_price != null) {
            stmt.bindString(7, yf_price);
        }
 
        String sf_price = entity.getSf_price();
        if (sf_price != null) {
            stmt.bindString(8, sf_price);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, OrderDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String orderid = entity.getOrderid();
        if (orderid != null) {
            stmt.bindString(2, orderid);
        }
 
        String project = entity.getProject();
        if (project != null) {
            stmt.bindString(3, project);
        }
 
        String member = entity.getMember();
        if (member != null) {
            stmt.bindString(4, member);
        }
 
        String user = entity.getUser();
        if (user != null) {
            stmt.bindString(5, user);
        }
 
        String commission = entity.getCommission();
        if (commission != null) {
            stmt.bindString(6, commission);
        }
 
        String yf_price = entity.getYf_price();
        if (yf_price != null) {
            stmt.bindString(7, yf_price);
        }
 
        String sf_price = entity.getSf_price();
        if (sf_price != null) {
            stmt.bindString(8, sf_price);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public OrderDB readEntity(Cursor cursor, int offset) {
        OrderDB entity = new OrderDB( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // orderid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // project
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // member
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // user
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // commission
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // yf_price
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // sf_price
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, OrderDB entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOrderid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setProject(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMember(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUser(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCommission(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setYf_price(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSf_price(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(OrderDB entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(OrderDB entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(OrderDB entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
